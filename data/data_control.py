import cv2 as cv
import numpy as np
import os
# batch['gt'] , batch['mask'] , batch['thresh'] , batch['punish']
class TrainData:
    def __init__(self) -> None:
        self.__cachedList = {}
        self.__max_cache_size = 20
    def load_data(self,img_dir:list,mask_dir:list,c_size:float,file_name:str,processes:list):
        id = file_name.strip().split('.')[0]
        cur_data = self.__cachedList.get(id,None)
        img_dir.append(file_name)
        mask_dir.append(id)
        if cur_data != None: return cur_data 
        else:    
            img = cv.imread(os.path.join(*img_dir) , cv.IMREAD_COLOR) # img_dir + file_name
            loaded = np.load(os.path.join(*mask_dir) + '.npz') #mask_dir + id
            mask = loaded['masks']
            # data = {'image':img,'gt':mask[0],'mask':mask[1],'thresh_map':mask[2],'punish':mask[3],'thresh_mask':mask[4],'c_size':c_size} #thresh_mask will be generated by make_fit_padding
            data = {'image':img , 'c_mask':mask , 'c_size':c_size,'filename':file_name} #c_mask is compress mask
            for process in processes: #[img,mask]
                data = process(data)
            if len(self.__cachedList) < self.__max_cache_size:
               self.__cachedList[id] = data
            return data